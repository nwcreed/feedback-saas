// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  stripeAccountId String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  submissions    FormSubmission[] // Relation vers les soumissions de formulaires

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
<<<<<<< HEAD
  livemode           Boolean?
=======
>>>>>>> 451f6011d04af68a45d9bd9c38e259fa8e9be3ee
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Form {
  id          Int               @id @default(autoincrement()) // Identifiant unique
  name        String            // Nom du formulaire
  description String?           // Description du formulaire
  userId      String            // Référence à l'utilisateur qui a créé le formulaire
  published   Boolean           // Indique si le formulaire est publié
  submissions  FormSubmission[] // Relation vers les soumissions de formulaires

  @@map("forms") // Mapping de la table
}

model FormSubmission {
  id          Int       @id @default(autoincrement())
  formId      Int
  userId      String?
  userName    String
  userEmail   String
  message     String    // Ce champ doit être présent
  rating      Int
  submittedAt DateTime   @default(now())

  form        Form      @relation(fields: [formId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@map("form_submissions")
}
